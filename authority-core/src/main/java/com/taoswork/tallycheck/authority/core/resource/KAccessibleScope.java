package com.taoswork.tallycheck.authority.core.resource;

import java.util.Collection;

/**
 * Specify permission on a particular resource (Type: IKPermission, owned by a user (type: IKAuthority) )
 * Specify desired access. (type: Access)
 * Work out the accessible resources.
 *
 *  Generated by: IKAccessVerifier
 *  Consumed by: filter query
 *
 *  Usage:
 *  inUnionMode, default: false;
 *  If not union mode:
 *      in pipe-like:
 *          all | or(passCases) | drop or(blockCases)
 *      in sql-like:
 *          select * where m1 true or m2 true or ... or mx true and not (nm1 true or nm2 true or ...)
 *          select * where m1 true or m2 true or ... or mx true and nm1 false and nm2 false and ...
 *  If union mode
 *      in pipe-like:
 *          (all | or(passCases)) and (alL | drop or(blockCases))
 *      in sql-like:
 *          select * where m1 true or m2 true or not (nm1 true or nm2 true)
 *          select * where m1 true or m2 true or (nm1 false and nm2 false)
 */
public final class KAccessibleScope {
    public final boolean inUnionMode;
    public final Collection<String> passCases;
    public final Collection<String> blockCases;

    public KAccessibleScope(
            Collection<String> passCases,
            Collection<String> blockCases) {
        this(passCases, blockCases, false);
    }

    public KAccessibleScope(
            Collection<String> passCases,
            Collection<String> blockCases, boolean inUnionMode) {
        this.passCases = passCases;
        this.blockCases = blockCases;
        this.inUnionMode = inUnionMode;
    }
}
